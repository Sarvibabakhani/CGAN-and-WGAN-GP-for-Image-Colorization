# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AR21xkOI8k-hfVcokd7z6UoKhiDYXioA
"""

import torch
import torchvision.transforms as transforms
from torchvision.transforms import ToTensor
from torchvision.transforms import Resize
import numpy as np
from skimage.color import lab2rgb

 # data shoud prepared to be mini-batches of 3-channel RGB images of shape (3 x H x W).
 # with dtype float and have values in the [0, 1] range.
 # All images will be resized to 299 x 299. 

def data_IS(data, device):
  tr = transforms.Compose([transforms.Resize((299,299))])
  transToTensor = transforms.Compose([transforms.ToTensor()])
  list_for_cat = []
  for j in range(len(data)):
        lab = torch.cat([(data[j][0]+1)*50, data[j][1]*128], dim=1)
        lab_r = tr(lab)
        lab_norm = torch.squeeze(lab_r,0).permute(1,2,0).cpu()
        lab_arr = np.array(lab_norm)
        img_rgb_arr = lab2rgb(lab_arr) # Converting L*a*b to RGB
        img_rgb_tensor = transToTensor(img_rgb_arr)
        img_rgb_tensor = img_rgb_tensor*256
        img_rgb_tensor = img_rgb_tensor.to(torch.uint8)
        img_rgb_tensor = torch.unsqueeze(img_rgb_tensor,0)
        list_for_cat.append(img_rgb_tensor)
  image_for_FID = torch.cat(list_for_cat, dim=0).to(device)

  return image_for_FID

